load_settings("settings.ini")
load_settings("styles.ini")

import("conio")
conio.SetTitle("Flappy Bird")
conio.ShowCursor(false)

import_as("windows","win")

require "util"

local width = tonumber(get_setting("width"))
local height = tonumber(get_setting("height"))
score = 0

import("filesystem")
require "image"

background = 0

function RedrawImage()



if background ~= 0
then
Image.release(background)
end


background = Image.new(math.floor(width),math.floor(height))
for x = 0,width-1,1
do

    for y = 0,height-1,1
    do
    Image.set(background,x,y,177)
    end

end

for x = 0,width-1,1
do

    for y = 30+(x%3)+math.random(0,1),height-1,1
    do
    Image.set(background,x,y,37)
    end

end

for y = 0,width-1,1
do
    Image.set(background,82,y,99)
    Image.set(background,width,y,99)
    Image.set(background,width-1,y,99)
end

Image.set(background,65,10,224)
Image.set(background,66,10,224)
Image.set(background,67,10,224)
Image.set(background,68,10,224)
Image.set(background,69,10,224)
Image.set(background,70,10,224)
Image.set(background,66,11,224)
Image.set(background,67,11,224)
Image.set(background,68,11,224)
Image.set(background,69,11,224)
Image.set(background,66,9,224)
Image.set(background,67,9,224)
Image.set(background,68,9,224)
Image.set(background,69,9,224)

Image.set(background,35,10,112)
Image.set(background,36,10,112)
Image.set(background,37,10,112)
Image.set(background,38,10,112)
Image.set(background,39,10,112)
Image.set(background,34,10,112)
Image.set(background,36,11,112)
Image.set(background,37,11,112)
Image.set(background,38,11,112)
Image.set(background,39,11,112)
Image.set(background,36,9,112)
Image.set(background,37,9,112)
Image.set(background,38,9,112)
Image.set(background,39,9,112)
Image.set(background,36,8,112)
Image.set(background,37,8,112)
Image.set(background,38,8,112)
Image.set(background,39,7,112)

end



RedrawImage()

require "bird"
require "map"
require "menu"
require "credits"
require "stats"

import("winmm")
import("system")

difficulty = tonumber(get_setting("difficulty"))
sounds = tonumber(get_setting("sounds"))
local initialized = tonumber(get_setting("initialized"))
local difficulties = {"Noob","Easy","Medium","Hard","Hardcore","Hell"}
local speeds = {30000000,25000000,20000000,18000000,16000000,18500000}




local number_of_birds = 0

::MENU::


local menu = Menu.new()

Menu.PushOption(menu,"Play")
Menu.PushOption(menu,"Stats")
Menu.PushOption(menu,"Options")
Menu.PushOption(menu,"Credits")
Menu.PushOption(menu,"Exit")

local selection = Menu.Select(menu) -- also number of players

menu = nil





if selection == 0
then
menu = Menu.new()

Menu.PushOption(menu,"1 Player")
Menu.PushOption(menu,"2 Players")
Menu.PushOption(menu,"3 Players")
Menu.PushOption(menu,"4 Players")
Menu.PushOption(menu,"return")

number_of_birds = Menu.Select(menu)

menu = nil

if number_of_birds == 4
then
goto MENU
end
end

local birds = {}


if number_of_birds == 0
then
birds[0] = Bird.new()
birds[0].position.x = 30.0
birds[0].position.y = 15.0
birds[0].lastposition.x = birds[0].position.x
birds[0].lastposition.y = birds[0].position.y
birds[0].velocity.x = 0.0
birds[0].velocity.y = 0.0
birds[0].speed.up = -1.5
birds[0].speed.down = 0.6
birds[0].color = tonumber(get_setting("bird0.color"))
birds[0].key = 0x26
birds[0].alt = 0x20
end

if number_of_birds == 1
then
birds[0] = Bird.new()
birds[0].position.x = 30.0
birds[0].position.y = 15.0
birds[0].lastposition.x = birds[0].position.x
birds[0].lastposition.y = birds[0].position.y
birds[0].velocity.x = 0.0
birds[0].velocity.y = 0.0
birds[0].speed.up = -1.5
birds[0].speed.down = 0.6
birds[0].color = tonumber(get_setting("bird0.color"))
birds[0].darkcolor = tonumber(get_setting("bird0.darkcolor"))    
birds[0].key = 0x26

birds[1] = Bird.new()
birds[1].position.x = 20.0
birds[1].position.y = 15.0
birds[1].lastposition.x = birds[1].position.x
birds[1].lastposition.y = birds[1].position.y
birds[1].velocity.x = 0.0
birds[1].velocity.y = 0.0
birds[1].speed.up = -1.5
birds[1].speed.down = 0.6
birds[1].color = tonumber(get_setting("bird1.color"))
birds[1].darkcolor = tonumber(get_setting("bird1.darkcolor"))    
birds[1].key = 0x20
end

if number_of_birds == 2
then
birds[0] = Bird.new()
birds[0].position.x = 30.0
birds[0].position.y = 15.0
birds[0].lastposition.x = birds[0].position.x
birds[0].lastposition.y = birds[0].position.y
birds[0].velocity.x = 0.0
birds[0].velocity.y = 0.0
birds[0].speed.up = -1.5
birds[0].speed.down = 0.6
birds[0].color = tonumber(get_setting("bird0.color"))
birds[0].darkcolor = tonumber(get_setting("bird0.darkcolor"))    
birds[0].key = 0x26

birds[1] = Bird.new()
birds[1].position.x = 20.0
birds[1].position.y = 15.0
birds[1].lastposition.x = birds[1].position.x
birds[1].lastposition.y = birds[1].position.y
birds[1].velocity.x = 0.0
birds[1].velocity.y = 0.0
birds[1].speed.up = -1.5
birds[1].speed.down = 0.6
birds[1].color = tonumber(get_setting("bird1.color"))
birds[1].darkcolor = tonumber(get_setting("bird1.darkcolor"))    
birds[1].key = 0x20

birds[2] = Bird.new()
birds[2].position.x = 10.0
birds[2].position.y = 15.0
birds[2].lastposition.x = birds[2].position.x
birds[2].lastposition.y = birds[2].position.y
birds[2].velocity.x = 0.0
birds[2].velocity.y = 0.0
birds[2].speed.up = -1.5
birds[2].speed.down = 0.6
birds[2].color = tonumber(get_setting("bird2.color"))
birds[2].darkcolor = tonumber(get_setting("bird2.darkcolor"))    
birds[2].key = 0x57
end

if number_of_birds == 3
then
birds[0] = Bird.new()
birds[0].position.x = 30.0
birds[0].position.y = 15.0
birds[0].lastposition.x = birds[0].position.x
birds[0].lastposition.y = birds[0].position.y
birds[0].velocity.x = 0.0
birds[0].velocity.y = 0.0
birds[0].speed.up = -1.5
birds[0].speed.down = 0.6
birds[0].color = tonumber(get_setting("bird0.color"))
birds[0].darkcolor = tonumber(get_setting("bird0.darkcolor"))    
birds[0].key = 0x26

birds[1] = Bird.new()
birds[1].position.x = 22.0
birds[1].position.y = 15.0
birds[1].lastposition.x = birds[1].position.x
birds[1].lastposition.y = birds[1].position.y
birds[1].velocity.x = 0.0
birds[1].velocity.y = 0.0
birds[1].speed.up = -1.5
birds[1].speed.down = 0.6
birds[1].color = tonumber(get_setting("bird1.color"))
birds[1].darkcolor = tonumber(get_setting("bird1.darkcolor"))    
birds[1].key = 0x20

birds[2] = Bird.new()
birds[2].position.x = 14.0
birds[2].position.y = 15.0
birds[2].lastposition.x = birds[2].position.x
birds[2].lastposition.y = birds[2].position.y
birds[2].velocity.x = 0.0
birds[2].velocity.y = 0.0
birds[2].speed.up = -1.5
birds[2].speed.down = 0.6
birds[2].color = tonumber(get_setting("bird2.color"))
birds[2].darkcolor = tonumber(get_setting("bird2.darkcolor"))    
birds[2].key = 0x57

birds[3] = Bird.new()
birds[3].position.x = 6.0
birds[3].position.y = 15.0
birds[3].lastposition.x = birds[3].position.x
birds[3].lastposition.y = birds[3].position.y
birds[3].velocity.x = 0.0
birds[3].velocity.y = 0.0
birds[3].speed.up = -1.5
birds[3].speed.down = 0.6
birds[3].color = tonumber(get_setting("bird3.color"))
birds[3].darkcolor = tonumber(get_setting("bird3.darkcolor"))    
birds[3].key = 0x68
end

if selection == 1
then

PrintRecords()

while(true)
do
if(win.KeyDown(0x1B) or win.KeyDown(0x0D))
then
    while (win.KeyDown(0x0D))
do
sleep(500000)
end
    conio.SetColor(15)
    system.System("cls")
    goto MENU
end
end
end

if selection == 2
then

    conio.SetColor(15)
    system.System("cls")

    local exitcode = 0
    local refp = malloc(4)

    menu = Menu.new()

    Menu.PushOption(menu,"Difficulty: ")
    Menu.SetItemReference(menu,refp)
    Menu.MakeItemSelectable(menu)
    Menu.SetDefault(menu,difficulty)
    Menu.PushColoredItem(menu,"Noob",10)
    Menu.PushColoredItem(menu,"Easy",10)
    Menu.PushColoredItem(menu,"Medium",14)
    Menu.PushColoredItem(menu,"Hard",14)
    Menu.PushColoredItem(menu,"Hardcore",12)
    Menu.PushColoredItem(menu,"Hell",12)
    Menu.PushOption(menu,"Sounds: ")
    Menu.SetItemReference(menu,refp+64)
    Menu.MakeItemSelectable(menu)
    Menu.SetDefault(menu,sounds)
    Menu.PushColoredItem(menu,"Off",12)
    Menu.PushColoredItem(menu,"On",10)
    Menu.PushOption(menu,"Width: ")
    Menu.SetItemReference(menu,refp+128)

    for i = 40,59,1
    do
    Menu.PushColoredItem(menu,tostring(i),14)
    end

    for i = 60,99,1
    do
    Menu.PushColoredItem(menu,tostring(i),10)
    end

    for i = 100,119,1
    do
    Menu.PushColoredItem(menu,tostring(i),14)
    end

    for i = 120,160,1
    do
    Menu.PushColoredItem(menu,tostring(i),12)
    end

    Menu.MakeItemSelectable(menu)
    Menu.SetDefault(menu,width - 40)
    Menu.PushOption(menu,"Height: ")
    Menu.SetItemReference(menu,refp+192)
    for i = 40,49,1
    do
    Menu.PushColoredItem(menu,tostring(i),10)
    end

    for i = 50,54,1
    do
    Menu.PushColoredItem(menu,tostring(i),14)
    end

    for i = 55,60,1
    do
    Menu.PushColoredItem(menu,tostring(i),12)
    end

    Menu.MakeItemSelectable(menu)
    Menu.SetDefault(menu,height - 40)
   


    Menu.PushOption(menu,"return")

    while exitcode ~= 4
    do
        exitcode = Menu.Select(menu)
    end



if refp ~= nil and refp ~= 0
then
difficulty = get(refp,0)
sounds = get(refp+64,0)
width = get(refp+128,0)+40
height = get(refp+192,0)+40
free(refp)
refp = nil
end

saveSettings()
RedrawImage()

    goto MENU

end

if selection == 3
then
Credits()
goto MENU
end

if selection == 4
then
Image.release(background)
conio.SetColor(15)
os.exit()
end

local map = Map.new()




::START::



map.sizex = width
map.sizey = height
map.color = tonumber(get_setting("map.color"))
map.border_color = tonumber(get_setting("map.border_color"))
map.distance = 40 - (difficulty * 4)
map.width = 6 - (difficulty)
map.gap = 15 - difficulty
map.min = 15 - difficulty
map.max = height - 15 + difficulty
map.margin_top = 1

Map.Initialize(map)

running = true

while running
do
    conio.SetTitle("Flappy Bird   score: " .. tostring(score) .. " cpu: " .. get_cpu() .. "% Difficulty: " .. difficulties[difficulty+1] .. "      ")

    Map.Update(map)
    for i = 0,number_of_birds,1
    do
        Bird.Update(birds[i])
        Map.NormalizePosition(map,birds[i])
    end

    for i = 0,number_of_birds,1
    do
        if(Map.CheckCollision(map,birds[i]) == true)
    then
        InsertRecord(score,difficulties[difficulty + 1],number_of_birds)
        score = 0
        running = false        
    end
    end


    Map.Draw(map)
    
    for i = 0,number_of_birds,1
    do
        Bird.Draw(birds[i])
    end

    if(win.KeyDown(0x1B) and running == true)
    then
        InsertRecord(score,difficulties[difficulty + 1],number_of_birds)
        score = 0
        birds = nil
        map = nil
        conio.SetColor(15)
        system.System("cls")
        goto MENU
    end

if number_of_birds == 0
then

    if win.KeyDown(0x27) == false
    then
    sleep(speeds[difficulty+1])
    else
    sleep(speeds[difficulty+1]/2) 
    end
else
    sleep(speeds[difficulty+1])
end
end


conio.SetColor(10)
conio.Gotoxy(0,0)

if sounds == 1
then
winmm.PlaySync("assets//lost.wav")
for i = 0,number_of_birds,1
    do
        Bird.Reset(birds[i])
    end
end




goto START